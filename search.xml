<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>活成自己想要的样子--记我为什么要写博客</title>
    <url>/2020/12/15/%E6%B4%BB%E6%88%90%E8%87%AA%E5%B7%B1%E6%83%B3%E8%A6%81%E7%9A%84%E6%A0%B7%E5%AD%90-%E8%AE%B0%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>今天是我的生日，是一个对我而言比较特殊的日子，所以总得写点什么。  </p>
<a id="more"></a>

<h2 id="生日"><a href="#生日" class="headerlink" title="生日"></a>生日</h2><p>虽然这个博客两天前就差不多建好了，但是一直以来都是在测试和学习相关内容，没有时间去写属于自己的东西，所以今天写也是挺开心的，生日给了我一个难得的契机。  </p>
<p>好吧今天其实过得并不好，自己还在健美课上受伤了；其实我还是有一些感悟的，不过今天大概率没有心情说，留着等我以后更得了。</p>
<p>未来还是要好好努力，别让自己后悔的同时保持每天心情的愉悦，这就是我的生日愿望了。至于说以前的事情，那就对自己做一个和解吧，今年因为疫情的缘故呆在家里也没有好好学习，自己也焦虑过一段时间，但是总得来说，还是对自己很满意了，自己保研到了自己想要去的地方，然后还认识了一些人，自己的社交圈子更大了一点（虽然自己并不喜欢），也忙忙碌碌的，每天都会学一些新的知识，此外导师给的工资也挺满意的，相比于其他研究生来说。  </p>
<p>还有就是自己减肥成功，身边的人都说我变瘦了，不过我自己感知却并不强，感觉自己还是以前那个自己，从表面上的的确确减了20斤，也算是很棒了，希望在研究生阶段自己能坚持健身，到毕业的时候一身肌肉哈哈哈。</p>
<p>这些大概就是我的生日愿望了吧，最重要的还是自己身体健康每天都开心。人的生命只有一次，这是一个老话，但是每一天其实也只有一次……所以每一天都要珍惜呐。</p>
<p>不过人终究也是要死亡的，再说下去感觉就有点虚了。就算我现在所追求的，终是某种虚妄之事，但只要我不后悔，那就没有关系。</p>
<h2 id="关于我为什么要写博客这件事"><a href="#关于我为什么要写博客这件事" class="headerlink" title="关于我为什么要写博客这件事"></a>关于我为什么要写博客这件事</h2><p>其实最主要的还是希望自己能记下一些事情，<strong>虽然自己也有写日记，但是有一些内容（比如说学习、技术等等）还是不适合放在OneNote里面</strong>，因为那样子查找过于艰难了，写博客，当然得要写技术类的，至于说感受之类的，那也可以写，但是主要阵地肯定是OneNote。而且自己也不愿意去暴露个人隐私。</p>
<p>其次自己也经常去折腾一些软件之类的，这些还是非常繁琐的事情，可以说非常没有理论性了，唯有记录下来才方便日后的查询，顺便也可以帮助一下路过的人。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>2020年马上就要过去了，加油！</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>思考</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言中main函数有关的东西</title>
    <url>/2020/12/20/C%E8%AF%AD%E8%A8%80%E4%B8%ADmain%E5%87%BD%E6%95%B0%E6%9C%89%E5%85%B3%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
    <content><![CDATA[<p>一直好奇C语言中main函数里面的一些东西，今天查了些许资料，把主要内容记录一下。</p>
<a id="more"></a>
<p>一个典型的C语言函数如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="1-其中main函数的类型是int，这一点是必须的，不能是void，因为有的编译器并不支持-void-main"><a href="#1-其中main函数的类型是int，这一点是必须的，不能是void，因为有的编译器并不支持-void-main" class="headerlink" title="1. 其中main函数的类型是int，这一点是必须的，不能是void，因为有的编译器并不支持 void main()"></a>1. 其中<code>main</code>函数的类型是<code>int</code>，这一点是必须的，不能是void，因为有的编译器并不支持 <code>void main()</code></h2><h2 id="2-在最新的-C99-标准中，只有以下两种定义方式是正确的："><a href="#2-在最新的-C99-标准中，只有以下两种定义方式是正确的：" class="headerlink" title="2. 在最新的 C99 标准中，只有以下两种定义方式是正确的："></a>2. 在最新的 C99 标准中，只有以下两种定义方式是正确的：</h2><pre><code><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span>  <span class="comment">/* 无参数形式 */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span> <span class="comment">/* 带参数形式 */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

所以还是写 `int main`比较好，具体为什么不支持`void main`是因为一开始C 语言只有`int`这一种类型</code></pre>
<h2 id="3-C语言的返回值"><a href="#3-C语言的返回值" class="headerlink" title="3. C语言的返回值"></a>3. C语言的返回值</h2><p>返回值返回给哪里去了呢？？<br>答案是返回给操作系统了，表示程序退出的状态</p>
<p>如果返回是0，那么表示程序正常退出<br>这个返回值是可以自己定义的<br>在Linux系统中<code>$?</code>是上一个命令的退出状态</p>
<p>例如我编译并执行下面这段程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后再在shell中输入：<br><code>$?</code><br>那么会输出：<br><code>1: command not found</code></p>
<p>或者直接<code>echo &quot;$?&quot;</code><br>那么会输出 <code>1</code><br>同理，<code>return 0</code>会使得<code>$?</code>变成<code>0</code></p>
<p>而在Windows 操作系统中，假如说用cmd 执行了刚刚编译出来的程序，那么可以通过：<br><code>echo %ERRORLEVEL%</code><br>来查看返回值</p>
<h2 id="4-用-amp-amp-连接两个命令，假如前一个命令没有正常退出，那后一个程序不会执行"><a href="#4-用-amp-amp-连接两个命令，假如前一个命令没有正常退出，那后一个程序不会执行" class="headerlink" title="4. 用&amp;&amp; 连接两个命令，假如前一个命令没有正常退出，那后一个程序不会执行"></a>4. 用&amp;&amp; 连接两个命令，假如前一个命令没有正常退出，那后一个程序不会执行</h2><p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gcc a.c <span class="meta">#a.c 返回0，输出Helo World</span></span><br><span class="line">./a.out &amp;&amp; ./a.out</span><br><span class="line">#那么会返回 </span><br><span class="line">&gt; Hello world</span><br><span class="line">&gt; Hello world</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gcc a.c <span class="meta">#a.c 返回1，输出Helo World</span></span><br><span class="line">./a.out &amp;&amp; ./a.out</span><br><span class="line">#那么会返回 </span><br><span class="line">&gt; Hello world</span><br><span class="line">因为前一个./a.out 返回<span class="number">1</span>， 会使得后一个a.out不执行</span><br></pre></td></tr></table></figure>

<h2 id="4-上面的内容参考了以下内容"><a href="#4-上面的内容参考了以下内容" class="headerlink" title="4. 上面的内容参考了以下内容"></a>4. 上面的内容参考了以下内容</h2><p><a href="https://blog.csdn.net/piaojun_pj/article/details/5986516">https://blog.csdn.net/piaojun_pj/article/details/5986516</a><br><a href="http://c.biancheng.net/cpp/html/725.html">http://c.biancheng.net/cpp/html/725.html</a></p>
<h2 id="5-假如说这个芯片不是通用的CPU，而是一个嵌入式芯片，连操作系统都没有，情况会怎么样"><a href="#5-假如说这个芯片不是通用的CPU，而是一个嵌入式芯片，连操作系统都没有，情况会怎么样" class="headerlink" title="5. 假如说这个芯片不是通用的CPU，而是一个嵌入式芯片，连操作系统都没有，情况会怎么样"></a>5. 假如说这个芯片不是通用的CPU，而是一个嵌入式芯片，连操作系统都没有，情况会怎么样</h2><p>首先，很多时候嵌入式芯片连操作系统都没有，但是也有的是有的，常见的嵌入式操作系统如下：</p>
<ul>
<li>嵌入式Linux</li>
<li>Windows CE</li>
<li>Windows XP Embedded</li>
<li>ndows Vista Embedded</li>
<li>ndows Embedded Compact 7</li>
<li>Windows IoT</li>
<li>VxWorks</li>
<li>uCOSII</li>
<li>QNX</li>
<li>FreeRTOS</li>
<li>ENEA OSE</li>
</ul>
<p>这个问题有待探究……</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>英语中的meta词缀</title>
    <url>/2020/12/19/%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84meta%E8%AF%8D%E7%BC%80/</url>
    <content><![CDATA[<p>英语中meta的含义：</p>
<blockquote>
<p>“Meta” is a prefix meaning “referring to itself.”</p>
</blockquote>
<p>翻译成“元”， 例如元数据，元思考<br>元数据：关于数据的数据<br>元思考：关于思考的思考</p>
<p>metacharacters: 关于字符的字符</p>
]]></content>
      <categories>
        <category>小知识</category>
      </categories>
  </entry>
  <entry>
    <title>STM32 的一些问题</title>
    <url>/2020/12/20/STM32-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ol>
<li><p>Exit9 gpio触发dac，发现只要有电荷就能触发<br>用一根杜邦线连上引脚，也能触发</p>
</li>
<li><p>STM32 操作系统的问题</p>
</li>
<li><p>STM32 启动的问题</p>
</li>
<li><p>Cube Mx 的一些问题</p>
</li>
</ol>
]]></content>
      <categories>
        <category>STM</category>
      </categories>
  </entry>
  <entry>
    <title>C语言对一个字的某些位作操作</title>
    <url>/2020/12/20/C%E8%AF%AD%E8%A8%80%E5%AF%B9%E4%B8%80%E4%B8%AA%E5%AD%97%E7%9A%84%E6%9F%90%E4%BA%9B%E4%BD%8D%E4%BD%9C%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>事件起因是我想要对一个数，比如说32位的数，中的某一个位置1或者置0，那么程序该如何写会显得更加优雅呢？</p>
]]></content>
  </entry>
  <entry>
    <title>bashrc的一些配置</title>
    <url>/2020/12/20/bashrc%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>配置好了WSL2的一些环境，保存一下，以防不时之需</p>
<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># clash需要的：</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span> <span class="comment"># // 这里的端口号根据 clash 而定</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line"><span class="built_in">export</span> all_proxy=<span class="string">&quot;socks5://127.0.0.1:7891&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line"><span class="comment"># 防止开机提示</span></span><br><span class="line">date &gt;&gt;.hushlogin </span><br><span class="line">sudo /etc/init.d/xrdp start &gt;&gt;.hushlogin</span><br><span class="line">ibus-daemon --xim -d</span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=ibus</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=@im=ibus</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=ibus</span><br><span class="line"><span class="built_in">export</span> SCREENDIR=<span class="variable">$HOME</span>/.screen</span><br><span class="line">[ -d <span class="variable">$SCREENDIR</span>  ] || mkdir -p -m 700 <span class="variable">$SCREENDIR</span></span><br><span class="line"><span class="comment">#sudo swapon /swap &gt;.hushlogin</span></span><br><span class="line"><span class="comment">#############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一些短称</span></span><br><span class="line"><span class="built_in">alias</span> c=<span class="string">&quot;clear&quot;</span></span><br><span class="line"><span class="built_in">alias</span> db=<span class="string">&quot;cd <span class="variable">$HOME</span>/Blog&quot;</span></span><br><span class="line"><span class="built_in">alias</span> dp=<span class="string">&quot;cd <span class="variable">$HOME</span>/Blog/source/_posts&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#让cd的时候列出目录下的内容</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">cd</span></span>() &#123;</span><br><span class="line">    new_directory=<span class="string">&quot;$*&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$#</span> -eq 0 ]; <span class="keyword">then</span> </span><br><span class="line">        new_directory=<span class="variable">$&#123;HOME&#125;</span>;</span><br><span class="line">	<span class="keyword">fi</span>;</span><br><span class="line"><span class="built_in">builtin</span> <span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$&#123;new_directory&#125;</span>&quot;</span> &amp;&amp; ls</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################################</span></span><br><span class="line"><span class="comment">#use screen to tun software when using wsl2</span></span><br><span class="line">screen -wipe &gt;/dev/null</span><br><span class="line">screen_name=<span class="string">&quot;LAPTOP&quot;</span></span><br><span class="line">result=$(screen -ls | grep <span class="string">&quot;<span class="variable">$screen_name</span>&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$result</span> == <span class="string">&quot;&quot;</span>  ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exec</span> screen -dm -S LAPTOP_clash clash &amp; &gt;/dev/null</span><br><span class="line">    <span class="comment">#打卡</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>《影响力》读后笔记</title>
    <url>/2020/12/20/%E3%80%8A%E5%BD%B1%E5%93%8D%E5%8A%9B%E3%80%8B%E8%AF%BB%E5%90%8E%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>先占坑</p>
]]></content>
  </entry>
  <entry>
    <title>中断、触发、唤醒</title>
    <url>/2020/12/20/%E4%B8%AD%E6%96%AD%E3%80%81%E8%A7%A6%E5%8F%91%E3%80%81%E5%94%A4%E9%86%92/</url>
    <content><![CDATA[<p>挖个坑说明一下这三者之间的联系区别等等<br>因为某些ip是有触发的，而事件却是和中断有关的</p>
]]></content>
  </entry>
  <entry>
    <title>储存器相关知识</title>
    <url>/2020/12/20/%E5%82%A8%E5%AD%98%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<ol>
<li>各种类型的存储器</li>
<li>字长/位长的拓展</li>
<li>将1kx8位的储存器变成4kx4位的储存器，怎么做</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>利用vscode高效学习与工作</title>
    <url>/2020/12/20/%E5%88%A9%E7%94%A8vscode%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%B7%A5%E4%BD%9C/</url>
    <content><![CDATA[<p>先挖个坑</p>
<ol>
<li>插件的使用</li>
<li>主题</li>
<li>python相关</li>
<li>markdown相关</li>
<li>网易云插件使用体验</li>
<li>与WSL2的交互</li>
<li>翻译插件</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>坑爹的Windows记事本</title>
    <url>/2020/12/20/%E5%9D%91%E7%88%B9%E7%9A%84Windows%E8%AE%B0%E4%BA%8B%E6%9C%AC/</url>
    <content><![CDATA[<ol>
<li>编码</li>
<li>文件头</li>
<li>建议</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>我的数据备份设置</title>
    <url>/2020/12/20/%E6%88%91%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<ol>
<li>三个硬盘</li>
<li>Freefilesync</li>
<li>Onedirve(10T)</li>
<li>Windows设置某个网络为付费流量网络</li>
</ol>
]]></content>
  </entry>
</search>
